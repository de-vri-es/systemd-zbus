//! # DBus interface proxies for: `org.freedesktop.systemd1.Automount`
//!
//! This code was generated by `zbus-xmlgen` `3.1.0` from DBus introspection data.
//! Source: `org.freedesktop.systemd1.Automount.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::PeerProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::dbus_proxy;

#[dbus_proxy(
    interface = "org.freedesktop.systemd1.Automount",
    default_service = "org.freedesktop.systemd1"
)]
trait Automount {
    /// DirectoryMode property
    #[dbus_proxy(property)]
    fn directory_mode(&self) -> zbus::Result<u32>;

    /// ExtraOptions property
    #[dbus_proxy(property)]
    fn extra_options(&self) -> zbus::Result<String>;

    /// Result property
    #[dbus_proxy(property)]
    fn result(&self) -> zbus::Result<String>;

    /// TimeoutIdleUSec property
    #[dbus_proxy(property, name = "TimeoutIdleUSec")]
    fn timeout_idle_usec(&self) -> zbus::Result<u64>;

    /// Where property
    #[dbus_proxy(property)]
    fn where_(&self) -> zbus::Result<String>;
}
