//! # DBus interface proxies for: `org.freedesktop.systemd1.Path`
//!
//! This code was generated by `zbus-xmlgen` `3.1.0` from DBus introspection data.
//! Source: `org.freedesktop.systemd1.Path.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::PeerProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::dbus_proxy;

#[dbus_proxy(
    interface = "org.freedesktop.systemd1.Path",
    default_service = "org.freedesktop.systemd1"
)]
trait Path {
    /// DirectoryMode property
    #[dbus_proxy(property)]
    fn directory_mode(&self) -> zbus::Result<u32>;

    /// MakeDirectory property
    #[dbus_proxy(property)]
    fn make_directory(&self) -> zbus::Result<bool>;

    /// Paths property
    #[dbus_proxy(property)]
    fn paths(&self) -> zbus::Result<Vec<(String, String)>>;

    /// Result property
    #[dbus_proxy(property)]
    fn result(&self) -> zbus::Result<String>;

    /// TriggerLimitBurst property
    #[dbus_proxy(property)]
    fn trigger_limit_burst(&self) -> zbus::Result<u32>;

    /// TriggerLimitIntervalUSec property
    #[dbus_proxy(property, name = "TriggerLimitIntervalUSec")]
    fn trigger_limit_interval_usec(&self) -> zbus::Result<u64>;

    /// Unit property
    #[dbus_proxy(property)]
    fn unit(&self) -> zbus::Result<String>;
}
